# Docker Compose pour Game Vote Festival - Environnement SaaS
# Configuration complète avec services de développement et production

version: '3.8'

services:
  # === SERVICE PRINCIPAL : Application React ===
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
        - VITE_SUPABASE_PUBLISHABLE_KEY=${VITE_SUPABASE_PUBLISHABLE_KEY}
    container_name: game-vote-festival-app
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
    volumes:
      # Logs pour monitoring
      - ./logs:/var/log/nginx
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`localhost`)"
      - "traefik.http.services.app.loadbalancer.server.port=8080"

  # === SERVICE DE DÉVELOPPEMENT (optionnel) ===
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: game-vote-festival-dev
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
      - VITE_SUPABASE_PUBLISHABLE_KEY=${VITE_SUPABASE_PUBLISHABLE_KEY}
    volumes:
      # Hot reload pour le développement
      - .:/app
      - /app/node_modules
    networks:
      - app-network
    profiles:
      - dev
    command: npm run dev -- --host 0.0.0.0

  # === MONITORING : Prometheus pour métriques ===
  prometheus:
    image: prom/prometheus:latest
    container_name: game-vote-festival-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    profiles:
      - monitoring
    restart: unless-stopped

  # === MONITORING : Grafana pour dashboards ===
  grafana:
    image: grafana/grafana:latest
    container_name: game-vote-festival-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - app-network
    profiles:
      - monitoring
    restart: unless-stopped

  # === REVERSE PROXY : Traefik ===
  traefik:
    image: traefik:v3.0
    container_name: game-vote-festival-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080" # Dashboard Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - app-network
    profiles:
      - production
    restart: unless-stopped

  # === CACHE : Redis pour sessions et cache ===
  redis:
    image: redis:7-alpine
    container_name: game-vote-festival-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-defaultpass}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    profiles:
      - cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

# === VOLUMES PERSISTANTS ===
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local

# === RÉSEAU INTERNE ===
networks:
  app-network:
    driver: bridge
    name: game-vote-festival-network